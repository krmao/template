apply plugin: 'com.android.application'
//apply plugin: 'com.taobao.atlas'
apply plugin: "kotlin-android"
apply plugin: 'kotlin-android-extensions'
apply plugin: 'walle'

walle {
    apkOutputFolder = new File("${buildDir}/outputs/channels");// 指定渠道包的输出路径
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';// 定制渠道包的APK的文件名称
    channelFile = new File("${projectDir}/channels.txt")// 渠道配置文件
}

//atlas {
//    atlasEnabled true
//    tBuildConfig {
//        autoStartBundles = [
//            'com.smart.template.module.setting',
//            //'com.smart.template.module.mine',
//        ]
//        autoPackageId = true
//        outOfApkBundles = [
//            //'module-template-hybird', //adb push arsenal/apps/app-template/build/outputs/remote-bundles-debug/libcom_smart_template_android_module_hybird.so /sdcard/Android/data/com.smart.template/cache/
//        ]
//        preLaunch = 'com.smart.template.library.CXPreLaunch' //initBeforeAtlas
//    }
//}

//上传bugly符号表配置
/*apply plugin: 'bugly'
bugly {
    appId = ''
    appKey = ''
}*/

android {
    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.smart.template"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        //Gradle Plugin 2.0以上,AppCompat23.2以上,Android 5.0之前使用Vector
        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true
        multiDexKeepProguard file('multiDexKeep.pro')

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        ndk {// 设置支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a', 'x86' //'x86_64', 'arm64-v8a'
        }

        manifestPlaceholders = [DEBUG: rootProject.ext.debug]
    }

    useLibrary 'org.apache.http.legacy'

    resourcePrefix "home_"

    signingConfigs {
        debug {
            keyAlias 'debug'
            keyPassword '123456'
            storeFile file('debug.keystore')
            storePassword '123456'
            v2SigningEnabled true
        }

        release {
            keyAlias 'debug'
            keyPassword '123456'
            storeFile file('debug.keystore')
            storePassword '123456'
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            proguardFiles "$rootDir/readme/scripts/proguard_base.pro", "proguard-rules.pro"
            testProguardFiles "$rootDir/readme/scripts/proguard_base.pro", "proguard-rules.pro"
        }

        release {
            debuggable false
            jniDebuggable false
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            signingConfig signingConfigs.release
            proguardFiles "$rootDir/readme/scripts/proguard_base.pro", "proguard-rules.pro"
            testProguardFiles "$rootDir/readme/scripts/proguard_base.pro", "proguard-rules.pro"
        }
    }


    testOptions {
        unitTests.returnDefaultValues = false
        resultsDir = "${buildDir}/test-reports"

        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE.TXT'
        exclude 'META-INF/LICENSE.TXT'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    lintOptions {
        fatal 'UnusedResources'
        warning 'ResourceType'
        checkReleaseBuilds false
        abortOnError false
        lintConfig file("$rootDir/lint.xml")
        showAll true
        absolutePaths true
        textReport true
        textOutput file("$buildDir/outputs/lint/${project.name}_lint-report.txt")
        xmlReport true
        xmlOutput file("$buildDir/outputs/lint/${project.name}_lint-report.xml")
        htmlReport true
        htmlOutput file("$buildDir/outputs/lint/${project.name}_lint-report.html")
    }

    configurations.all {
        resolutionStrategy {
            force "com.google.code.findbugs:jsr305:1.3.9"
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            /*output.processManifest.doLast {
                def manifestOutFile = output.processManifest.manifestOutputFile
                def manifestContents = manifestOutFile.getText('UTF-8')
                def newFileContents = manifestContents.replaceAll("${debug}", rootProject.ext.debug)
                manifestOutFile.write(newFileContents, 'UTF-8')
            }*/

            if (variant.getBuildType().isMinifyEnabled()) {
                variant.assemble.doLast {
                    def fileList = variant.mappingFile.parentFile.listFiles()
                    println("output:mappingfilepath:" + variant.mappingFile.path)
                    println("output:mappingfile.parentFile.listFiles:" + fileList)
                    println("output:mappingfile.exists:" + variant.mappingFile.exists())

                    if (!fileList.every { it.name == "mapping.txt" }) {
                        fileList.each {
                            if (it.name.contains("-mapping.txt")) {
                                println("output:copy from:${it.path}")
                                println("output:copy to:${it.parent}" + "/mapping.txt")
                                def fromFile = it;
                                def toDir = it.parent;
                                copy {
                                    println("output:copy from:${fromFile}")
                                    println("output:copy to:${toDir}" + "/mapping.txt")

                                    from fromFile
                                    into toDir
                                    rename { String fileName ->
                                        "mapping.txt"
                                    }
                                }
                                println("output:copy end")
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * compile          :   常规的打包配置，会将依赖代码打入到dex中去
 * bundleCompile    :   bundle中的代码不会打入dex中去，bundle将以libxxx.so文件的形式，放在apk的lib目录下，随包发布
 * outOfApkBundles  :   指定远程bundle，不会打入apk中
 */
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile project(':library-template-base')
    compile project(':module-template-hybird')
    compile project(':module-template-react_native')
    compile project(':module-template-mine')
    compile project(':module-template-setting')
    compile project(':module-template-im')

    // LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakcanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanaryVersion"

    // Dependencies for local unit tests
    //testCompile "junit:junit:$rootProject.ext.junitVersion"
    //testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    //testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    // Android Testing Support Library's runner and rules
    //androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    //androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    // Dependencies for Android unit tests
    //androidTestCompile "junit:junit:$rootProject.ext.junitVersion"
    //androidTestCompile "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    //androidTestCompile "com.google.dexmaker:dexmaker:$rootProject.ext.dexmakerVersion"
    //androidTestCompile "com.google.dexmaker:dexmaker-mockito:$rootProject.ext.dexmakerVersion"

    // Set this dependency to build and run UI Automator tests
    //androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    // Espresso UI Testing
    //androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    //androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    //androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
    //androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
    /*androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion", {
        exclude group: "com.google.code.findbugs"
        exclude group: "com.android.support", module: "support-annotations"
    })*/

    // Resolve conflicts between main and test APK:
    //androidTestCompile "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:animated-vector-drawable:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:leanback-v17:$rootProject.ext.supportLibraryVersion"
}

//apply from: 'tinker-support.gradle'
