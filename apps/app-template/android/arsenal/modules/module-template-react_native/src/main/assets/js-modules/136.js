__d(function(t,e,n,a,r){'use strict';var o=e(r[0]),i={createIdentityMatrix:function(){return[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]},createCopy:function(t){return[t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]]},createOrthographic:function(t,e,n,a,r,o){return[2/(e-t),0,0,0,0,2/(a-n),0,0,0,0,-2/(o-r),0,-(e+t)/(e-t),-(a+n)/(a-n),-(o+r)/(o-r),1]},createFrustum:function(t,e,n,a,r,o){var i=1/(e-t),u=1/(a-n),s=1/(r-o);return[r*i*2,0,0,0,0,r*u*2,0,0,(e+t)*i,(a+n)*u,(o+r)*s,-1,0,0,o*r*s*2,0]},createPerspective:function(t,e,n,a){var r=1/Math.tan(t/2),o=1/(n-a);return[r/e,0,0,0,0,r,0,0,0,0,(a+n)*o,-1,0,0,a*n*o*2,0]},createTranslate2d:function(t,e){var n=i.createIdentityMatrix();return i.reuseTranslate2dCommand(n,t,e),n},reuseTranslate2dCommand:function(t,e,n){t[12]=e,t[13]=n},reuseTranslate3dCommand:function(t,e,n,a){t[12]=e,t[13]=n,t[14]=a},createScale:function(t){var e=i.createIdentityMatrix();return i.reuseScaleCommand(e,t),e},reuseScaleCommand:function(t,e){t[0]=e,t[5]=e},reuseScale3dCommand:function(t,e,n,a){t[0]=e,t[5]=n,t[10]=a},reusePerspectiveCommand:function(t,e){t[11]=-1/e},reuseScaleXCommand:function(t,e){t[0]=e},reuseScaleYCommand:function(t,e){t[5]=e},reuseScaleZCommand:function(t,e){t[10]=e},reuseRotateXCommand:function(t,e){t[5]=Math.cos(e),t[6]=Math.sin(e),t[9]=-Math.sin(e),t[10]=Math.cos(e)},reuseRotateYCommand:function(t,e){t[0]=Math.cos(e),t[2]=-Math.sin(e),t[8]=Math.sin(e),t[10]=Math.cos(e)},reuseRotateZCommand:function(t,e){t[0]=Math.cos(e),t[1]=Math.sin(e),t[4]=-Math.sin(e),t[5]=Math.cos(e)},createRotateZ:function(t){var e=i.createIdentityMatrix();return i.reuseRotateZCommand(e,t),e},reuseSkewXCommand:function(t,e){t[4]=Math.tan(e)},reuseSkewYCommand:function(t,e){t[1]=Math.tan(e)},multiplyInto:function(t,e,n){var a=e[0],r=e[1],o=e[2],i=e[3],u=e[4],s=e[5],c=e[6],m=e[7],v=e[8],l=e[9],f=e[10],d=e[11],h=e[12],M=e[13],C=e[14],p=e[15],T=n[0],x=n[1],y=n[2],b=n[3];t[0]=T*a+x*u+y*v+b*h,t[1]=T*r+x*s+y*l+b*M,t[2]=T*o+x*c+y*f+b*C,t[3]=T*i+x*m+y*d+b*p,T=n[4],x=n[5],y=n[6],b=n[7],t[4]=T*a+x*u+y*v+b*h,t[5]=T*r+x*s+y*l+b*M,t[6]=T*o+x*c+y*f+b*C,t[7]=T*i+x*m+y*d+b*p,T=n[8],x=n[9],y=n[10],b=n[11],t[8]=T*a+x*u+y*v+b*h,t[9]=T*r+x*s+y*l+b*M,t[10]=T*o+x*c+y*f+b*C,t[11]=T*i+x*m+y*d+b*p,T=n[12],x=n[13],y=n[14],b=n[15],t[12]=T*a+x*u+y*v+b*h,t[13]=T*r+x*s+y*l+b*M,t[14]=T*o+x*c+y*f+b*C,t[15]=T*i+x*m+y*d+b*p},determinant:function(t){var e=babelHelpers.slicedToArray(t,16),n=e[0],a=e[1],r=e[2],o=e[3],i=e[4],u=e[5],s=e[6],c=e[7],m=e[8],v=e[9],l=e[10],f=e[11],d=e[12],h=e[13],M=e[14],C=e[15];return o*s*v*d-r*c*v*d-o*u*l*d+a*c*l*d+r*u*f*d-a*s*f*d-o*s*m*h+r*c*m*h+o*i*l*h-n*c*l*h-r*i*f*h+n*s*f*h+o*u*m*M-a*c*m*M-o*i*v*M+n*c*v*M+a*i*f*M-n*u*f*M-r*u*m*C+a*s*m*C+r*i*v*C-n*s*v*C-a*i*l*C+n*u*l*C},inverse:function(t){var e=i.determinant(t);if(!e)return t;var n=babelHelpers.slicedToArray(t,16),a=n[0],r=n[1],o=n[2],u=n[3],s=n[4],c=n[5],m=n[6],v=n[7],l=n[8],f=n[9],d=n[10],h=n[11],M=n[12],C=n[13],p=n[14],T=n[15];return[(m*h*C-v*d*C+v*f*p-c*h*p-m*f*T+c*d*T)/e,(u*d*C-o*h*C-u*f*p+r*h*p+o*f*T-r*d*T)/e,(o*v*C-u*m*C+u*c*p-r*v*p-o*c*T+r*m*T)/e,(u*m*f-o*v*f-u*c*d+r*v*d+o*c*h-r*m*h)/e,(v*d*M-m*h*M-v*l*p+s*h*p+m*l*T-s*d*T)/e,(o*h*M-u*d*M+u*l*p-a*h*p-o*l*T+a*d*T)/e,(u*m*M-o*v*M-u*s*p+a*v*p+o*s*T-a*m*T)/e,(o*v*l-u*m*l+u*s*d-a*v*d-o*s*h+a*m*h)/e,(c*h*M-v*f*M+v*l*C-s*h*C-c*l*T+s*f*T)/e,(u*f*M-r*h*M-u*l*C+a*h*C+r*l*T-a*f*T)/e,(r*v*M-u*c*M+u*s*C-a*v*C-r*s*T+a*c*T)/e,(u*c*l-r*v*l-u*s*f+a*v*f+r*s*h-a*c*h)/e,(m*f*M-c*d*M-m*l*C+s*d*C+c*l*p-s*f*p)/e,(r*d*M-o*f*M+o*l*C-a*d*C-r*l*p+a*f*p)/e,(o*c*M-r*m*M-o*s*C+a*m*C+r*s*p-a*c*p)/e,(r*m*l-o*c*l+o*s*f-a*m*f-r*s*d+a*c*d)/e]},transpose:function(t){return[t[0],t[4],t[8],t[12],t[1],t[5],t[9],t[13],t[2],t[6],t[10],t[14],t[3],t[7],t[11],t[15]]},multiplyVectorByMatrix:function(t,e){var n=babelHelpers.slicedToArray(t,4),a=n[0],r=n[1],o=n[2],i=n[3];return[a*e[0]+r*e[4]+o*e[8]+i*e[12],a*e[1]+r*e[5]+o*e[9]+i*e[13],a*e[2]+r*e[6]+o*e[10]+i*e[14],a*e[3]+r*e[7]+o*e[11]+i*e[15]]},v3Length:function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2])},v3Normalize:function(t,e){var n=1/(e||i.v3Length(t));return[t[0]*n,t[1]*n,t[2]*n]},v3Dot:function(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]},v3Combine:function(t,e,n,a){return[n*t[0]+a*e[0],n*t[1]+a*e[1],n*t[2]+a*e[2]]},v3Cross:function(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]},quaternionToDegreesXYZ:function(t,e,n){var a=babelHelpers.slicedToArray(t,4),r=a[0],o=a[1],u=a[2],s=a[3],c=r*r,m=o*o,v=u*u,l=r*o+u*s,f=s*s+c+m+v,d=180/Math.PI;return l>.49999*f?[0,2*Math.atan2(r,s)*d,90]:l<-.49999*f?[0,-2*Math.atan2(r,s)*d,-90]:[i.roundTo3Places(Math.atan2(2*r*s-2*o*u,1-2*c-2*v)*d),i.roundTo3Places(Math.atan2(2*o*s-2*r*u,1-2*m-2*v)*d),i.roundTo3Places(Math.asin(2*r*o+2*u*s)*d)]},roundTo3Places:function(t){var e=t.toString().split('e');return.001*Math.round(e[0]+'e'+(e[1]?+e[1]-3:3))},decomposeMatrix:function(t){o(16===t.length,'Matrix decomposition needs a list of 3d matrix values, received %s',t);var e=[],n=[],a=[],r=[],u=[];if(t[15]){for(var s=[],c=[],m=0;m<4;m++){s.push([]);for(var v=0;v<4;v++){var l=t[4*m+v]/t[15];s[m].push(l),c.push(3===v?0:l)}}if(c[15]=1,i.determinant(c)){if(0!==s[0][3]||0!==s[1][3]||0!==s[2][3]){var f=[s[0][3],s[1][3],s[2][3],s[3][3]],d=i.inverse(c),h=i.transpose(d);e=i.multiplyVectorByMatrix(f,h)}else e[0]=e[1]=e[2]=0,e[3]=1;for(m=0;m<3;m++)u[m]=s[3][m];var M=[];for(m=0;m<3;m++)M[m]=[s[m][0],s[m][1],s[m][2]];a[0]=i.v3Length(M[0]),M[0]=i.v3Normalize(M[0],a[0]),r[0]=i.v3Dot(M[0],M[1]),M[1]=i.v3Combine(M[1],M[0],1,-r[0]),r[0]=i.v3Dot(M[0],M[1]),M[1]=i.v3Combine(M[1],M[0],1,-r[0]),a[1]=i.v3Length(M[1]),M[1]=i.v3Normalize(M[1],a[1]),r[0]/=a[1],r[1]=i.v3Dot(M[0],M[2]),M[2]=i.v3Combine(M[2],M[0],1,-r[1]),r[2]=i.v3Dot(M[1],M[2]),M[2]=i.v3Combine(M[2],M[1],1,-r[2]),a[2]=i.v3Length(M[2]),M[2]=i.v3Normalize(M[2],a[2]),r[1]/=a[2],r[2]/=a[2];var C,p=i.v3Cross(M[1],M[2]);if(i.v3Dot(M[0],p)<0)for(m=0;m<3;m++)a[m]*=-1,M[m][0]*=-1,M[m][1]*=-1,M[m][2]*=-1;return n[0]=.5*Math.sqrt(Math.max(1+M[0][0]-M[1][1]-M[2][2],0)),n[1]=.5*Math.sqrt(Math.max(1-M[0][0]+M[1][1]-M[2][2],0)),n[2]=.5*Math.sqrt(Math.max(1-M[0][0]-M[1][1]+M[2][2],0)),n[3]=.5*Math.sqrt(Math.max(1+M[0][0]+M[1][1]+M[2][2],0)),M[2][1]>M[1][2]&&(n[0]=-n[0]),M[0][2]>M[2][0]&&(n[1]=-n[1]),M[1][0]>M[0][1]&&(n[2]=-n[2]),{rotationDegrees:C=n[0]<.001&&n[0]>=0&&n[1]<.001&&n[1]>=0?[0,0,i.roundTo3Places(180*Math.atan2(M[0][1],M[0][0])/Math.PI)]:i.quaternionToDegreesXYZ(n,s,M),perspective:e,quaternion:n,scale:a,skew:r,translation:u,rotate:C[2],rotateX:C[0],rotateY:C[1],scaleX:a[0],scaleY:a[1],translateX:u[0],translateY:u[1]}}}}};n.exports=i},136,[18]);