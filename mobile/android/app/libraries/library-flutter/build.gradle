apply plugin: "com.android.library"
apply plugin: "kotlin-android"
apply plugin: "kotlin-android-extensions"

group = "com.template"
version = "1.0.0"

android {
    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }
    resourcePrefix "flutter_"

    sourceSets {
        main {
            manifest.srcFile "src/main/AndroidManifest.xml"
            res.srcDir "src/main/res"
            java { srcDirs = ["src/main/java"] }
        }
    }

    if (gradle.ext.modules.flutter.repositoryLocal.dependencyProfile) {
        // ERROR: Unable to resolve dependency for @profile/compileClasspath
        buildTypes {
            profile {
                initWith debug
            }
        }
    }

    task buildFlutterLibAAR(type: Exec) {
        def flutterLibDir = "$rootProject.projectDir/../flutter_module"
        def flutterSDKDir = "$flutterLibDir/.fvm/flutter_sdk"
        println("> Configure project :library-flutter:buildFlutterLibAAR flutterLibDir=$flutterLibDir")
        println("> Configure project :library-flutter:buildFlutterLibAAR flutterSDKDir=$flutterSDKDir")

        inputs.file("$flutterLibDir/pubspec.yaml")
        inputs.dir("$flutterLibDir/lib")
        inputs.dir("$flutterLibDir/images")
        outputs.dir("$flutterLibDir/build/host/outputs/repo")

        workingDir flutterLibDir

        if (System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")) {
            commandLine "cmd", "/c", "$flutterSDKDir/bin/flutter.bat build aar --debug --build-number 0.0.1-SNAPSHOT --pub --verbose"
        } else {
            commandLine "sh", "-c", "$flutterSDKDir/bin/flutter build aar --debug --build-number 0.0.1-SNAPSHOT --pub --verbose"
        }
        doFirst {
            println("==================== buildFlutterLibAAR start ====================")
            if (!project.file(flutterSDKDir).exists()) {
                println("==================== buildFlutterLibAAR install flutter sdk ====================")
                def result = exec {
                    workingDir flutterLibDir
                    commandLine "sh", "-c", "fvm install"
                }
                println("==================== buildFlutterLibAAR install flutter result=$result")
                println("==================== buildFlutterLibAAR install flutter end ====================")
            }
        }
        doLast {
            println("==================== buildFlutterLibAAR result=${getExecResult()}")
            println("==================== buildFlutterLibAAR end ====================")
        }
    }

    getTasksByName("preBuild", false).first().dependsOn("buildFlutterLibAAR")
}

dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])

    api project(":library-base")

    if (gradle.ext.modules.flutter.repositoryLocal.enable == true) {
        if (gradle.ext.modules.flutter.repositoryLocal.dependencyDebug) {
            debugApi gradle.ext.modules.flutter.repositoryLocal.dependencyDebug
        }
        if (gradle.ext.modules.flutter.repositoryLocal.dependencyProfile) {
            profileApi gradle.ext.modules.flutter.repositoryLocal.dependencyProfile
        }
        if (gradle.ext.modules.flutter.repositoryLocal.dependencyRelease) {
            releaseApi gradle.ext.modules.flutter.repositoryLocal.dependencyRelease
        }
    }
}
