buildscript {
    ext.kotlinVersion = "1.3.31"
    ext.ankoVersion = "0.8.2"

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.1' // fat aar 暂不支持 3.5.0
        classpath 'com.kezong:fat-aar:1.2.5'
        classpath "org.jetbrains.kotlin:kotlin-android-extensions:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }

    ext {
        compileSdkVersion = 28
        buildToolsVersion = "28.0.3"
        supportLibraryVersion = "28.0.0"

        inbuiltThirdLibraries = true

        def localProperties = new Properties()
        def localPropertiesFile = rootProject.file('local.properties')
        if (localPropertiesFile.exists()) localPropertiesFile.withReader('UTF-8') { reader -> localProperties.load(reader) }

        flutterRoot = localProperties.getProperty('flutter.sdk')
        if (flutterRoot == null) throw new Exception("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")

        flutterVersionCode = localProperties.getProperty('flutter.versionCode')
        if (flutterVersionCode == null) flutterVersionCode = '1'

        flutterVersionName = localProperties.getProperty('flutter.versionName')
        if (flutterVersionName == null) flutterVersionName = '1.0'

        println("> flutter versionCode=$flutterVersionCode")
        println("> flutter versionName=$flutterVersionName")

    }
}

rootProject.buildDir = '../build'

allprojects {
    repositories {
        google()
        jcenter()
        flatDir {
            dirs "file://${rootProject.buildDir}/flutter-bundle/outputs/aar/"
        }
    }
}

subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"

    project.evaluationDependsOn(':app') // 这一行可以使得 :app:preBuild 在 :flutter-bundle:copyBundle 之后运行

    project.configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            failOnVersionConflict()
            // prefer modules that are part of this build (multi-project or composite build) over external modules
            preferProjectModules()
            // cache dynamic versions for 0 minutes
            cacheDynamicVersionsFor 0, 'seconds'
            // don't cache changing modules at all
            cacheChangingModulesFor 0, 'seconds'

            force "com.android.support:support-v4:${rootProject.ext.supportLibraryVersion}"
            force "com.android.support:appcompat-v7:${rootProject.ext.supportLibraryVersion}"
            force "com.android.support:support-vector-drawable:${rootProject.ext.supportLibraryVersion}"
            force "com.android.support:animated-vector-drawable:${rootProject.ext.supportLibraryVersion}"
        }
    }

    project.afterEvaluate {
        if ((project.plugins.hasPlugin('android') || project.plugins.hasPlugin('android-library'))) {
            android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}