apply plugin: 'com.android.library'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

// 是否启用 fat aar, 默认 true, 主工程不直接依赖 flutter-bundle, 而是依赖产物 flutter-bundle.aar
// https://juejin.im/post/5cd51f61f265da039c056e39
if (rootProject.ext.inbuiltThirdLibraries) {
    apply plugin: 'com.kezong.fat-aar'
}

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    android.libraryVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${project.name}-${defaultConfig.versionName}-${variant.getBuildType().getName()}.aar"
        }
    }

    sourceSets {
        main {
            java {
                srcDirs 'src'
                srcDirs "../app/src/main/java/io"
            }
        }
    }

}

flutter {
    source '../..'
}

afterEvaluate {
    assembleDebug.finalizedBy "copyBundle"
    assembleRelease.finalizedBy "copyBundle"
}

def srcDir = "$buildDir/outputs/aar"
def targetDir = "../../../android/app/libraries/repo/aars"
task copyBundle(type: Copy) {
    from srcDir
    into targetDir
    include('**/*.aar')

    doFirst {
        fileTree(dir: srcDir).matching { include('**/*.aar') }.files.forEach { file ->
            logger.lifecycle("> Task :flutter-bundle:copyBundle copy file: ${file.absolutePath}")
        }
        logger.lifecycle("> Task :flutter-bundle:copyBundle copy to ${file(targetDir).absolutePath}")
    }

    doLast { logger.lifecycle("> Task :flutter-bundle:copyBundle copy success !") }
}

dependencies {
    compileOnly 'com.android.support:support-v4:28.0.0'
    compileOnly 'com.android.support:appcompat-v7:28.0.0'

    if (rootProject.ext.inbuiltThirdLibraries) {
        def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()
        def plugins = new Properties()
        def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
        if (pluginsFile.exists()) {
            pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
        }
        plugins.each { name, _ ->
            logger.quiet("> Configure project :flutter-bundle embed with $name")
            embed project(path: ":$name", configuration: 'default')
            compileOnly project(path: ":$name")
        }
    }
}