buildscript {
    ext {
        kotlinVersion = '1.2.0'
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath 'org.hidetake:gradle-ssh-plugin:2.9.0'
    }
}
allprojects {
    repositories {
        flatDir {
            dirs "file://$rootProject.projectDir/arsenal/libraries/thirdparty/thirdparty-aars"
        }
        maven { url "http://maven.dds.com/nexus/content/groups/public" }
        maven { url "https://jitpack.io" }
        jcenter()
        mavenCentral()
    }
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
    tasks.withType(Javadoc) {
        options.encoding = "UTF-8"
    }
}

task clean(type: Delete) {
    delete(buildDir, 'out')
}

ext {
    logger.error(">>>>>>>>>>==============================>>>>>>>>>>")
    logger.error(">>>>>>>>>>==============================>>>>>>>>>>")
    logger.error("config properties")
    logger.error(">>>>>>>>>>==============================>>>>>>>>>>")
    server_debug = false
    server_port = 8080
    server_ip = null
    server_user = null
    server_password = null
    server_sql_ip = null
    server_sql_user = null
    server_sql_password = null
    server_jwt_secret = null
    logger = Logging.getLogger("build-script")

    Properties properties = new Properties()

    try {
        properties.load(project.rootProject.file("local.properties").newDataInputStream())
    } catch (Exception e) {
        e.printStackTrace()
    }
    try {
        server_debug = properties.get("server_debug").toBoolean()
    } catch (Exception e) {
        e.printStackTrace()
    }
    try {
        server_port = properties.get("server_port").toInteger()
    } catch (Exception e) {
        e.printStackTrace()
    }

    server_ip = properties.get("server_ip")
    server_user = properties.get("server_user")
    server_password = properties.get("server_password")
    server_sql_ip = properties.get("server_sql_ip")
    server_sql_user = properties.get("server_sql_user")
    server_sql_password = properties.get("server_sql_password")
    server_jwt_secret = properties.get("server_jwt_secret")

    logger.error(">>>>>>>>>>==============================<<<<<<<<<<")
    logger.error("server_debug:$server_debug")
    logger.error("server_port:$server_port")
    logger.error("server_ip:$server_ip")
    logger.error("server_user:$server_user")
    logger.error("server_password:$server_password")
    logger.error("server_sql_ip:$server_sql_ip")
    logger.error("server_sql_user:$server_sql_user")
    logger.error("server_sql_password:$server_sql_password")
    logger.error("server_jwt_secret:$server_jwt_secret")
    logger.error("<<<<<<<<<<==============================<<<<<<<<<<")
    logger.error("<<<<<<<<<<==============================<<<<<<<<<<")

    springfox_swagger_version = "2.5.0" //2.6.0+ token 不更新
    spring_boot_version = "1.5.8.RELEASE"
}
