#
# docker-compose -f docker-compose-dev.yml up --remove-orphans --force-recreate # 一键启动 + 删除暂时未用到的容器(再次用到需要重新下载镜像)
# docker-compose -f docker-compose-dev.yml up --force-recreate                  # 一键启动 + 不删除暂时未用到的容器(避免重新下载镜像)
# docker-compose -f docker-compose-dev.yml up                                   # 非首次启动(插件等在之前已经安装好)
# docker-compose -f docker-compose-dev.yml up -d                                # 非首次启动(插件等在之前已经安装好) + 后台运行
#
# docker-compose -f docker-compose-dev.yml down                                                                         # 关闭所有容器
#
# docker-compose restart elasticsearch                                                                                  # 重启指定容器(安装 elasticsearch 插件后需要重启容器)
#
# docker exec -it elasticsearch bash                                                                                    # 进入 elasticsearch 容器内部
#
# docker-compose ps                                                                                                     # 列出所有容器
#
#
# mysql-adminer         visit http://localhost:3307/
# redis-commander       visit http://localhost:3308/
# elasticsearch-kibana  visit http://localhost:3309/
# rabbitmq              visit http://localhost:3310/
#
services:
  mysql:
    platform: linux/x86_64
    image: mysql:5.7
    container_name: mysql
    hostname: mysql
    restart: always
    privileged: true
    ports:
      - 3306:3306
    expose:
      - 3306
    command:
      --default-authentication-plugin=mysql_native_password
      --init-file /data/application/init.sql
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --explicit_defaults_for_timestamp=true
      --lower_case_table_names=1
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=88888888
      - MYSQL_TCP_PORT=3306
    volumes:
      # - /etc/localtime:/etc/localtime:ro # not for mac
      - mysql_data:/var/lib/mysql:rw
      - ./mysql/mysql-init.sql:/data/application/init.sql
    networks:
      - default_network

  adminer:
    image: adminer
    hostname: mysql-adminer
    container_name: mysql-adminer
    privileged: true
    restart: always
    ports:
      - 3307:8080
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    networks:
      - default_network

  redis:
    image: redis:latest
    hostname: redis
    container_name: redis
    privileged: true
    restart: always
    command: redis-server /etc/redis.conf --requirepass 88888888
    environment:
      - TZ=Asia/Shanghai
    volumes:
      # - /etc/localtime:/etc/localtime:ro # not for mac
      - redis_data:/data:rw
      - ./redis/redis.conf:/etc/redis.conf
    ports:
      - "6379:6379"
    networks:
      - default_network

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    platform: linux/x86_64
    restart: always
    privileged: true
    environment:
      - REDIS_HOSTS=redis
      - REDIS_HOST=redis
      - REDIS_PORT=redis:6379
      - REDIS_PASSWORD=88888888
      - HTTP_USER=root
      - HTTP_PASSWORD=88888888
    ports:
      - "3308:8081"
    networks:
      - default_network

  rabbitmq01:
    image: rabbitmq:management
    container_name: rabbitmq01
    hostname: rabbitmq01
    restart: always
    privileged: true
    ports:
      - 3310:15672
      - 5672:5672
    volumes:
      - rabbitmq01_data:/var/lib/rabbitmq
      - rabbitmq01_log:/var/log/rabbitmq
    environment:
      - TZ=Asia/Shanghai
      - LANG=en_US.UTF-8
      - RABBITMQ_NODENAME=rabbitmq01
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=m12345
      - RABBITMQ_ERLANG_COOKIE=rabbitcookie
      - RABBITMQ_CLUSTERED=false                    # 如果容器身份是从, 会执行rabbitmqctl join_cluster命令加入到集群中去
      - RABBITMQ_CLUSTER_WITH=                      # join的参数
      - RABBITMQ_RAM_NODE=false                     # ram 是以内存方式加入, 忽略该参数默认为磁盘节点
    networks:
      - default_network

# docker volume inspect [卷标名称]
# docker volume ls
volumes:
  mysql_data:
  redis_data:
  rabbitmq01_data:
  rabbitmq01_log:

networks:
  default_network:
